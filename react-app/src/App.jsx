import React, { useState, useEffect } from 'react'
import { Search, ExternalLink, CheckCircle, Circle, Download, BookOpen, Mouse, FlaskConical, BarChart3, FileText, Info, ChevronDown, ChevronUp } from 'lucide-react'
import Fuse from 'fuse.js'

function App() {
  const [activeTab, setActiveTab] = useState('models')
  const [models, setModels] = useState([])
  const [guidelines, setGuidelines] = useState([])
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedModel, setSelectedModel] = useState(null)
  const [checkedItems, setCheckedItems] = useState({})
  const [loading, setLoading] = useState(true)
  const [expandedCategories, setExpandedCategories] = useState({})

  // Load data on component mount
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true)
        const [modelsRes, guidelinesRes] = await Promise.all([
          fetch('/ds-research-tool/data/animal-models.json'),
          fetch('/ds-research-tool/data/arrive-guidelines.json')
        ])
        
        if (modelsRes.ok && guidelinesRes.ok) {
          const modelsData = await modelsRes.json()
          const guidelinesData = await guidelinesRes.json()
          setModels(modelsData)
          setGuidelines(guidelinesData)
          
          // Initialize expanded categories to show all by default
          const expandedState = {}
          guidelinesData.forEach(category => {
            expandedState[category.category] = true
          })
          setExpandedCategories(expandedState)
        }
      } catch (error) {
        console.error('Error loading data:', error)
      } finally {
        setLoading(false)
      }
    }
    
    loadData()
  }, [])

  // Search functionality
  const fuse = new Fuse(models, {
    keys: ['name', 'species', 'phenotypes', 'applications', 'advantages'],
    threshold: 0.3,
  })

  const filteredModels = searchTerm 
    ? fuse.search(searchTerm).map(result => result.item)
    : models

  // Checklist functionality
  const toggleCheck = (itemId) => {
    setCheckedItems(prev => ({
      ...prev,
      [itemId]: !prev[itemId]
    }))
  }

  const exportChecklist = () => {
    const completed = Object.entries(checkedItems)
      .filter(([_, checked]) => checked)
      .map(([id, _]) => {
        for (const category of guidelines) {
          const item = category.items.find(item => item.id === id)
          if (item) {
            return `${category.category}: ${item.item}`
          }
        }
        return id
      })
    
    const text = `ARRIVE Guidelines Checklist - Completed Items:\n\n${completed.join('\n')}\n\nGenerated by DS Research Tool`
    const blob = new Blob([text], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'arrive-checklist.txt'
    a.click()
    URL.revokeObjectURL(url)
  }

  const toggleCategory = (category) => {
    setExpandedCategories(prev => ({
      ...prev,
      [category]: !prev[category]
    }))
  }

  // Loading state
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading DS Research Tool...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <Mouse className="h-8 w-8 text-blue-600 mr-3" />
              <h1 className="text-2xl font-bold text-gray-900">DS Research Tool</h1>
            </div>
            <div className="text-sm text-gray-500">
              Down Syndrome Animal Model Comparison & Research Guidelines
            </div>
          </div>
        </div>
      </header>

      {/* Navigation */}
      <nav className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex space-x-8">
            {[
              { id: 'models', label: 'Animal Models', icon: Mouse },
              { id: 'compare', label: 'Model Comparison', icon: BarChart3 },
              { id: 'guidelines', label: 'ARRIVE Guidelines', icon: FileText },
              { id: 'resources', label: 'Resources', icon: BookOpen }
            ].map(({ id, label, icon: Icon }) => (
              <button
                key={id}
                onClick={() => setActiveTab(id)}
                className={`flex items-center px-3 py-4 text-sm font-medium border-b-2 ${
                  activeTab === id
                    ? 'border-blue-600 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <Icon className="h-4 w-4 mr-2" />
                {label}
              </button>
            ))}
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        
        {/* Animal Models Tab */}
        {activeTab === 'models' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-3xl font-bold text-gray-900">Down Syndrome Animal Models</h2>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search models..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
            
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {filteredModels.map((model) => (
                <div key={model.id} className="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow p-6">
                  <div className="flex justify-between items-start mb-4">
                    <h3 className="text-xl font-semibold text-gray-900">{model.name}</h3>
                    <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                      {model.availability}
                    </span>
                  </div>
                  
                  <div className="space-y-3">
                    <div>
                      <span className="text-sm font-medium text-gray-500">Background:</span>
                      <span className="ml-2 text-sm text-gray-900">{model.background}</span>
                    </div>
                    <div>
                      <span className="text-sm font-medium text-gray-500">Trisomy:</span>
                      <span className="ml-2 text-sm text-gray-900">{model.trisomy}</span>
                    </div>
                    <div>
                      <span className="text-sm font-medium text-gray-500">Genes:</span>
                      <span className="ml-2 text-sm text-gray-900">{model.genes}</span>
                    </div>
                  </div>
                  
                  <div className="mt-4">
                    <h4 className="text-sm font-medium text-gray-700 mb-2">Key Phenotypes:</h4>
                    <div className="flex flex-wrap gap-1">
                      {model.phenotypes.slice(0, 3).map((phenotype, idx) => (
                        <span key={idx} className="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded">
                          {phenotype}
                        </span>
                      ))}
                      {model.phenotypes.length > 3 && (
                        <span className="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded">
                          +{model.phenotypes.length - 3} more
                        </span>
                      )}
                    </div>
                  </div>
                  
                  <div className="mt-6 flex space-x-3">
                    <button
                      onClick={() => setSelectedModel(model)}
                      className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm"
                    >
                      View Details
                    </button>
                    <a
                      href={model.jackson_link}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm"
                    >
                      <ExternalLink className="h-4 w-4" />
                    </a>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Model Comparison Tab */}
        {activeTab === 'compare' && (
          <div className="space-y-6">
            <h2 className="text-3xl font-bold text-gray-900">Model Comparison</h2>
            
            <div className="bg-white rounded-lg shadow overflow-hidden">
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Model</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Trisomy</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Genes</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Best Applications</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Availability</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {models.map((model) => (
                      <tr key={model.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="font-medium text-gray-900">{model.name}</div>
                          <div className="text-sm text-gray-500">{model.background}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{model.trisomy}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{model.genes}</td>
                        <td className="px-6 py-4">
                          <div className="text-sm text-gray-900">
                            {model.applications.slice(0, 2).join(', ')}
                            {model.applications.length > 2 && '...'}
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            model.availability === 'Commercial' 
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-yellow-100 text-yellow-800'
                          }`}>
                            {model.availability}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}

        {/* ARRIVE Guidelines Tab */}
        {activeTab === 'guidelines' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-3xl font-bold text-gray-900">ARRIVE Guidelines Checklist</h2>
              <button
                onClick={exportChecklist}
                className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                <Download className="h-4 w-4 mr-2" />
                Export Checklist
              </button>
            </div>
            
            <div className="space-y-4">
              {guidelines.map((category) => (
                <div key={category.category} className="bg-white rounded-lg shadow">
                  <button
                    onClick={() => toggleCategory(category.category)}
                    className="w-full flex items-center justify-between p-6 text-left hover:bg-gray-50 transition-colors"
                  >
                    <h3 className="text-lg font-semibold text-gray-900">{category.category}</h3>
                    {expandedCategories[category.category] ? (
                      <ChevronUp className="h-5 w-5 text-gray-500" />
                    ) : (
                      <ChevronDown className="h-5 w-5 text-gray-500" />
                    )}
                  </button>
                  
                  {expandedCategories[category.category] && (
                    <div className="px-6 pb-6 space-y-4">
                      {category.items.map((item) => (
                        <div key={item.id} className="border-l-4 border-blue-200 pl-4">
                          <div className="flex items-start space-x-3">
                            <button
                              onClick={() => toggleCheck(item.id)}
                              className="mt-1 text-blue-600 hover:text-blue-700"
                            >
                              {checkedItems[item.id] ? (
                                <CheckCircle className="h-5 w-5" />
                              ) : (
                                <Circle className="h-5 w-5" />
                              )}
                            </button>
                            <div className="flex-1">
                              <p className="font-medium text-gray-900">{item.item}</p>
                              <div className="mt-2 text-sm text-gray-600 whitespace-pre-line">
                                {item.details}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Resources Tab */}
        {activeTab === 'resources' && (
          <div className="space-y-6">
            <h2 className="text-3xl font-bold text-gray-900">Research Resources</h2>
            
            <div className="grid gap-6 md:grid-cols-2">
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-xl font-semibold text-gray-900 mb-4">Sample Size Guidelines</h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Behavioral studies:</span>
                    <span className="font-medium">n≥10 per group</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Molecular studies:</span>
                    <span className="font-medium">n≥6 per group</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Power analysis:</span>
                    <span className="font-medium">80% power, α=0.05</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Attrition buffer:</span>
                    <span className="font-medium">+10-20% animals</span>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-xl font-semibold text-gray-900 mb-4">Key Databases</h3>
                <div className="space-y-3">
                  <a href="https://www.jax.org" target="_blank" rel="noopener noreferrer" 
                     className="flex items-center text-blue-600 hover:text-blue-700">
                    <ExternalLink className="h-4 w-4 mr-2" />
                    Jackson Laboratory
                  </a>
                  <a href="https://www.nc3rs.org.uk/arrive-guidelines" target="_blank" rel="noopener noreferrer"
                     className="flex items-center text-blue-600 hover:text-blue-700">
                    <ExternalLink className="h-4 w-4 mr-2" />
                    ARRIVE Guidelines
                  </a>
                  <a href="https://www.ncbi.nlm.nih.gov/pubmed" target="_blank" rel="noopener noreferrer"
                     className="flex items-center text-blue-600 hover:text-blue-700">
                    <ExternalLink className="h-4 w-4 mr-2" />
                    PubMed
                  </a>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>

      {/* Model Detail Modal */}
      {selectedModel && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-start mb-6">
                <h2 className="text-2xl font-bold text-gray-900">{selectedModel.name}</h2>
                <button
                  onClick={() => setSelectedModel(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  ✕
                </button>
              </div>
              
              <div className="grid gap-6 md:grid-cols-2">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Model Details</h3>
                  <div className="space-y-2">
                    <div><strong>Species:</strong> {selectedModel.species}</div>
                    <div><strong>Background:</strong> {selectedModel.background}</div>
                    <div><strong>Trisomy:</strong> {selectedModel.trisomy}</div>
                    <div><strong>Genes:</strong> {selectedModel.genes}</div>
                    <div><strong>Availability:</strong> {selectedModel.availability}</div>
                  </div>
                </div>
                
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Phenotypes</h3>
                  <div className="flex flex-wrap gap-2">
                    {selectedModel.phenotypes.map((phenotype, idx) => (
                      <span key={idx} className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
                        {phenotype}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
              
              <div className="mt-6 grid gap-6 md:grid-cols-3">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Advantages</h3>
                  <ul className="list-disc list-inside space-y-1 text-sm text-gray-600">
                    {selectedModel.advantages.map((advantage, idx) => (
                      <li key={idx}>{advantage}</li>
                    ))}
                  </ul>
                </div>
                
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Limitations</h3>
                  <ul className="list-disc list-inside space-y-1 text-sm text-gray-600">
                    {selectedModel.limitations.map((limitation, idx) => (
                      <li key={idx}>{limitation}</li>
                    ))}
                  </ul>
                </div>
                
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Applications</h3>
                  <ul className="list-disc list-inside space-y-1 text-sm text-gray-600">
                    {selectedModel.applications.map((application, idx) => (
                      <li key={idx}>{application}</li>
                    ))}
                  </ul>
                </div>
              </div>
              
              <div className="mt-6 flex space-x-4">
                <a
                  href={selectedModel.jackson_link}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  <ExternalLink className="h-4 w-4 mr-2" />
                  Jackson Laboratory
                </a>
                <button
                  onClick={() => setSelectedModel(null)}
                  className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default App
